# этап сборки
FROM mcr.microsoft.com/dotnet/sdk:7.0 AS build-env
# Эта строка выбирает базовый образ SDK .NET 7.0 в качестве основы для этапа сборки. 
# В этом этапе будет выполнена сборка приложения. 
# При выполнении этой строки происходит скачивания образа из репозитория по указанному адресу.

WORKDIR /app
# Задает рабочий каталог в контейнере, куда будут копироваться и собираться файлы проекта.

COPY *.csproj ./
# Копирует файл проекта в рабочий каталог в контейнере.

RUN dotnet restore
# Запускает команду dotnet restore для восстановления зависимостей проекта.

COPY . ./
# Копирует все остальные файлы проекта в рабочий каталог в контейнере.

RUN dotnet publish -c Release -o out
# Запускает команду dotnet publish для сборки проекта в режиме "Release" и помещает результаты в каталог "out".

################################################################################################################
# этап выполнения
FROM mcr.microsoft.com/dotnet/aspnet:7.0 AS runtime
# Эта строка выбирает базовый образ ASP.NET .NET 7.0 в качестве основы для этапа выполнения. 
# В этом этапе будет запущено приложение

WORKDIR /app
# Задает рабочий каталог в контейнере для этапа выполнения

EXPOSE 80
# Эта строка объявляет порт 80 в контейнере, что позволяет указать, какой порт будет слушать контейнер.

COPY --from=build-env /app/out .
# Копирует результаты сборки из этапа сборки (каталог "out") в текущий рабочий каталог в контейнере этапа выполнения.

ENTRYPOINT ["dotnet", "/app/QQQ.dll"]
# Эта строка задает точку входа для контейнера, указывая, какую команду следует выполнить при запуске контейнера. 
# В данном случае, контейнер будет запускать приложение, представленное в виде сборки "lection21program2.dll" 
# с использованием команды "dotnet".S

#################################################################################################################

docker build -t name image .
# -t означает тег. Аргумент, следующий за этим ключом, задает имя нашему образу. 
# Точка в конце указывает на каталог, где следует искать docker-файл. В данном случае это текущий каталог.

docker run -p 8090:80 name image
# в данном случае -p задает правило перенаправления портов. 
# В контейнере мы используем стандартный порт нашего приложения – 80, 
# тогда как снаружи контейнера будет доступен порт 8090. 
# Последним аргументом идет имя образа.
